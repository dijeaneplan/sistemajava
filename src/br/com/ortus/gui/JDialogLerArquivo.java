/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ortus.gui;

import br.com.ortus.beans.Componente;
import br.com.ortus.beans.Log;
import br.com.ortus.beans.Usuario;
import br.com.ortus.configuracaoPersistencia.TransactionManager;
import br.com.ortus.daosSistema.ComponenteDao;
import br.com.ortus.daosSistema.LogDao;
import br.com.ortus.daosSistema.UsuarioDao;
import br.com.ortus.utilidades.HashSistema;
import br.com.ortus.utilidades.Utilidades;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetAddress;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * @author TI
 */
public class JDialogLerArquivo extends javax.swing.JDialog {

    /**
     * Creates new form JDialogLerArquivo
     */
    JFileChooser jf;
    static private final String newline = "\n";
    ArrayList<Componente> componentes = new ArrayList();
    
    ArrayList<String[]> custosNovos = new ArrayList();

    public JDialogLerArquivo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jf = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        jButtonExecutar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSaida = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ler arquivo");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/pesquisarpequeno.png"))); // NOI18N
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonExecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/close.png"))); // NOI18N
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jTextAreaSaida.setColumns(20);
        jTextAreaSaida.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSaida);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/reloadpequeno.png"))); // NOI18N
        jButton1.setText("Atualizar custos");
        jButton1.setToolTipText("Ler arquivo .CSV separado por \";\"  \"\\\\n\"\n             * Primeira coluna => Codigo do sistema \"\\\\n\"\n             * Segunda coluna => Descrição \"\\\\n\"\n             * Terceira coluna => Novo Custo do Produto \"\\\\n\"");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonBuscar)
                    .addComponent(jButtonExecutar)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        //Handle open button action.
        int returnVal = jf.showOpenDialog(JDialogLerArquivo.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jf.getSelectedFile();
            //This is where a real application would open the file.
            String caminho = file.getAbsolutePath();

            lerArquivo(caminho);

            jTextAreaSaida.append("Leitura feita do arquivo: " + file.getName() + "." + newline);
        } else {
            jTextAreaSaida.append("Comando cancelado pelo usuario." + newline);
        }
        jTextAreaSaida.setCaretPosition(jTextAreaSaida.getDocument().getLength());



    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        atualizarCustos();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogLerArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogLerArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogLerArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogLerArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogLerArquivo dialog = new JDialogLerArquivo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaSaida;
    // End of variables declaration//GEN-END:variables

    

    private void lerArquivo(String caminho) {
        try {

            BufferedReader br = new BufferedReader(new FileReader(caminho));
            br.readLine();

            Usuario user = (Usuario) HashSistema.hash.get("usuarioLogado");
            Componente componente = new Componente();
            while (br.ready()) {
                String linha = br.readLine();
                String produto[] = linha.toString().split(";");



                componente.setIdProdusys(produto[0]);
                componente.setNome(produto[1]);
                componente.setUnidadeMedida(produto[3]);
                componente.setValor(Double.parseDouble(produto[2].replace(",", ".")));
                componente.setQtde(Double.parseDouble(produto[4].replace(",", ".")));
                componente.setCusto(Double.parseDouble(produto[5].replace(",", ".")));



                componente.setUsuario(user);

                componentes.add(componente);

                componente = new Componente();

                //System.out.println(produto[1]);  
            }
            br.close();
            persistirComponentes();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    private void persistirComponentes() {
        try {            
            jTextAreaSaida.append("QTDE de componentes: " + componentes.size() + newline);
            TransactionManager.beginTransaction();
            ComponenteDao dao = new ComponenteDao();
            for (int i = 0; i < componentes.size(); i++) {

                 
            dao.persistir(componentes.get(i));
        
                jTextAreaSaida.append(componentes.get(i).getNome() + newline);

            }
            TransactionManager.commit();
            jTextAreaSaida.append("Fim do cadastro!!!" + newline);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void persistir(Componente componente) {
        try{
        
       
        }catch(Exception e){
            jTextAreaSaida.append("Erro: " + e);
            TransactionManager.rollback();
        }
    }

    private void atualizarCustos() {
        int returnVal = jf.showOpenDialog(JDialogLerArquivo.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jf.getSelectedFile();
            //This is where a real application would open the file.
            String caminho = file.getAbsolutePath();

            lerArquivoComCustos(caminho);

            jTextAreaSaida.append("Leitura feita do arquivo: " + file.getName() + "." + newline);
        } else {
            jTextAreaSaida.append("Comando cancelado pelo usuario." + newline);
        }
        jTextAreaSaida.setCaretPosition(jTextAreaSaida.getDocument().getLength());
    }

    private void lerArquivoComCustos(String caminho) {
        try {

            BufferedReader br = new BufferedReader(new FileReader(caminho));
            br.readLine();

            Usuario user = (Usuario) HashSistema.hash.get("usuarioLogado");
            Componente componente = new Componente();
            while (br.ready()) {
                String linha = br.readLine();
                String custoDoProduto[] = linha.toString().split(";");
                
                custosNovos.add(custoDoProduto);
                jTextAreaSaida.append(custoDoProduto + "." + newline);
                

                
            }
            br.close();
            persistirComponentesComNovosCustos();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    
    }

    private void persistirComponentesComNovosCustos() {
        try {            
            jTextAreaSaida.append("Inicializando atualização");
            ArrayList<Componente> componentesNovos = new ArrayList();
            TransactionManager.beginTransaction();
            ComponenteDao dao = new ComponenteDao();
            componentesNovos = (ArrayList<Componente>) dao.obterLista();
            
            /* Depois de ler o arquivo com os novos custos comparar a lista de novos custos com
             * os custos atuais de cada componente e atualiza-los.
             *
             * Ler arquivo .CSV separado por ";" 
             * Primeira coluna => Codigo do sistema
             * Segunda coluna => Descrição
             * Terceira coluna => Novo Custo do Produto
             */
            
            for (int i = 0; i < componentesNovos.size(); i++) {
                for (int j = 0; j < custosNovos.size(); j++) {
                    String custoNovo = custosNovos.get(j)[2].replace(",", ".");
                    String idProdusys = custosNovos.get(j)[0];
                    if(componentesNovos.get(i).getIdProdusys().equals(idProdusys)){
                        componentesNovos.get(i).setCusto(Double.parseDouble(custoNovo));
                        dao.persistir(componentesNovos.get(i));
                    }
                }
            }
            Usuario user = (Usuario) HashSistema.hash.get("usuarioLogado");
            String ip = pegarIPDaMaquina();
            new LogDao().persistir(new Log(user, Utilidades.retData(), "Desktop", "***Leitura de Arquivo de Custos Novos***", ip));
            
            TransactionManager.commit();
            jTextAreaSaida.append("Fim do cadastro!!!" + newline);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private String pegarIPDaMaquina() {
        try {
            return InetAddress.getLocalHost().getHostAddress() + " - " + InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            System.out.println(e);
            return " . . . ";
        }
    }

}
